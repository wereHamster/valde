import { markdown } from "@catalog/core";

export default {
  title: "react-component-page",
  path: "/packages/react-component-page",
  component: () => markdown`
![version](https://img.shields.io/npm/v/@valde/react-component-page.svg)

The \`<ReactComponentPage>\` is used in place of an ordinary catalog page. Its purpose is to show a single React component. The page includes a live preview of the component, as well as documentation of its props. Later we may add more useful information such as related components, a stability indicator (eg. *experimental*, *stable*, *deprecated*), hyperlinks to code documentation (generated by [typedoc](http://typedoc.org) for example), hyperlink to original sources on GitHub/GitLab etc.

While you can use the page component manually, the package includes a commandline tool that extracts the relevant information from TypeScript source files. The goal is to keep the documentation in a standard format that is understood by as many tools as possible, and JSDoc fits that purpose. The idea is that you write your React components as usual, add JSDoc comments to the module, components, props fields etc. And a beautiful documentation page is generated for you without any additional effort.

# Example

Since the component replaces the whole page, we can't show it here inline. But you can head over to the [playground](/playground/react-component-page) to see an example. That page was generated from the \`src/example.tsx\` file.

# Usage

If you've previously written a catalog page like this:

~~~code|lang-js
import { markdown } from "@catalog/core";
export default () => markdown\`
…
\`;
~~~

Replace that with the following:

~~~code|lang-js
import { ReactComponentPage } from "@valde/react-component-page";
export default () => <ReactComponentPage {...} />;
~~~

The actual props you need to pass to \`<ReactComponentPage>\` are rather complex, so I encourage you to read the source (\`src/index.tsx\`).

# Generator

The package comes with a commandline tool – valde-react-component-page-generator – which extracts the required \`ReactComponentPage\` props from TypeScript files and writes them to a separate module that you can then import.

~~~code|lang-shell
./node_modules/.bin/valde-react-component-page-generator path/to/file.tsx
~~~

The above command will generate the file \`path/to/__doc__/file.components.tsx\`. You can import the props from that file and pass them to \`<ReactComponentPage>\`.

### Preview

The generator extracts texts from JSDoc comments. The component preview however must be written as code. Let's assume that you have a component called \`Button\`. The following example illustrates how to specify the preview:

~~~code|lang-js
import * as React from "react";
import { __catalogPreview__ } from "@valde/react-component-page";
import { ReactSpecimen } from "@catalog/core";

export class Button extends React.Component<ButtonProps> {
  render() {
    return <button {...this.props} />;
  }
}

__catalogPreview__(Button, () => (
  <ReactSpecimen>
    <Button>Hi</Button>
  </ReactSpecimen>
));
~~~

**Note**: You don't have to use \`ReactSpecimen\`. The preview can be any React component.

~~~hint
TODO: Describe how to eliminate this code in production builds.
~~~

# Notes

 - The generator only works with class components.
 - The class must be a named export.
 - You MUST specify the first type parameter of Component (the props). That's where the generator extracts the props fields and comments from.
 - The generator should handle multiple components in a single file just fine.
  `
};
